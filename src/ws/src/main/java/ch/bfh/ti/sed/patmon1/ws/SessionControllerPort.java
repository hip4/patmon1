
package ch.bfh.ti.sed.patmon1.ws;

import java.util.Date;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "SessionControllerPort", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SessionControllerPort {


    /**
     * 
     * @param session
     * @return
     *     returns ch.bfh.ti.sed.patmon1.ws.PatientList
     * @throws InvalidSessionException
     */
    @WebMethod
    @WebResult(name = "patients", targetNamespace = "")
    @RequestWrapper(localName = "getPatients", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.GetPatients")
    @ResponseWrapper(localName = "getPatientsResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.GetPatientsResponse")
    public PatientList getPatients(
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @param deviceId
     * @throws EntityNotFoundException
     * @throws DeviceNotAssignedException
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "returnDevice", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ReturnDevice")
    @ResponseWrapper(localName = "returnDeviceResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ReturnDeviceResponse")
    public void returnDevice(
        @WebParam(name = "deviceId", targetNamespace = "")
        Integer deviceId,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws DeviceNotAssignedException, EntityNotFoundException, InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @return
     *     returns boolean
     * @throws InvalidSessionException
     */
    @WebMethod
    @WebResult(name = "activated", targetNamespace = "")
    @RequestWrapper(localName = "isActivated", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.IsActivated")
    @ResponseWrapper(localName = "isActivatedResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.IsActivatedResponse")
    public boolean isActivated(
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @return
     *     returns ch.bfh.ti.sed.patmon1.ws.Measurement
     * @throws IllegalStateException
     * @throws InvalidSessionException
     */
    @WebMethod
    @WebResult(name = "measurement", targetNamespace = "")
    @RequestWrapper(localName = "testMeasure", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.TestMeasure")
    @ResponseWrapper(localName = "testMeasureResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.TestMeasureResponse")
    public Measurement testMeasure(
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws IllegalStateException, InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @param activationCode
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "enterActivationCode", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.EnterActivationCode")
    @ResponseWrapper(localName = "enterActivationCodeResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.EnterActivationCodeResponse")
    public void enterActivationCode(
        @WebParam(name = "activationCode", targetNamespace = "")
        String activationCode,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.LogoutResponse")
    public void logout(
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws InvalidSessionException
    ;

    /**
     * 
     * @param patient
     * @param session
     * @throws EntityAlreadyExistsException
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "registerPatient", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.RegisterPatient")
    @ResponseWrapper(localName = "registerPatientResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.RegisterPatientResponse")
    public void registerPatient(
        @WebParam(name = "patient", targetNamespace = "")
        Patient patient,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws EntityAlreadyExistsException, InvalidSessionException
    ;

    /**
     * 
     * @param periodStart
     * @param patient
     * @param session
     * @param periodEnd
     * @param device
     * @param measurementIntervalInSeconds
     * @throws DeviceAlreadyAssignedException
     * @throws EntityNotFoundException
     * @throws IllegalStateException
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "defineObservationPeriod", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.DefineObservationPeriod")
    @ResponseWrapper(localName = "defineObservationPeriodResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.DefineObservationPeriodResponse")
    public void defineObservationPeriod(
        @WebParam(name = "patient", targetNamespace = "")
        String patient,
        @WebParam(name = "device", targetNamespace = "")
        Integer device,
        @WebParam(name = "periodStart", targetNamespace = "")
        Date periodStart,
        @WebParam(name = "periodEnd", targetNamespace = "")
        Date periodEnd,
        @WebParam(name = "measurementIntervalInSeconds", targetNamespace = "")
        int measurementIntervalInSeconds,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws DeviceAlreadyAssignedException, EntityNotFoundException, IllegalStateException, InvalidSessionException
    ;

    /**
     * 
     * @param session
     * @throws IllegalStateException
     * @throws InvalidSessionException
     */
    @WebMethod
    @RequestWrapper(localName = "endTest", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.EndTest")
    @ResponseWrapper(localName = "endTestResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.EndTestResponse")
    public void endTest(
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws IllegalStateException, InvalidSessionException
    ;

    /**
     * 
     * @param endFilter
     * @param patientId
     * @param session
     * @param startFilter
     * @return
     *     returns ch.bfh.ti.sed.patmon1.ws.MeasurementList
     * @throws EntityNotFoundException
     * @throws InvalidSessionException
     */
    @WebMethod
    @WebResult(name = "measurements", targetNamespace = "")
    @RequestWrapper(localName = "consultPatientMeasurements", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ConsultPatientMeasurements")
    @ResponseWrapper(localName = "consultPatientMeasurementsResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ConsultPatientMeasurementsResponse")
    public MeasurementList consultPatientMeasurements(
        @WebParam(name = "patientId", targetNamespace = "")
        String patientId,
        @WebParam(name = "startFilter", targetNamespace = "")
        Date startFilter,
        @WebParam(name = "endFilter", targetNamespace = "")
        Date endFilter,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws EntityNotFoundException, InvalidSessionException
    ;

    /**
     * 
     * @param endFilter
     * @param observationPeriodId
     * @param session
     * @param startFilter
     * @return
     *     returns ch.bfh.ti.sed.patmon1.ws.MeasurementList
     * @throws EntityNotFoundException
     * @throws InvalidSessionException
     */
    @WebMethod
    @WebResult(name = "measurements", targetNamespace = "")
    @RequestWrapper(localName = "consultObservationPeriodMeasurements", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ConsultObservationPeriodMeasurements")
    @ResponseWrapper(localName = "consultObservationPeriodMeasurementsResponse", targetNamespace = "http://ch/bfh/ti/sed/patmon1/ws/", className = "ch.bfh.ti.sed.patmon1.ws.ConsultObservationPeriodMeasurementsResponse")
    public MeasurementList consultObservationPeriodMeasurements(
        @WebParam(name = "observationPeriodId", targetNamespace = "")
        Integer observationPeriodId,
        @WebParam(name = "startFilter", targetNamespace = "")
        Date startFilter,
        @WebParam(name = "endFilter", targetNamespace = "")
        Date endFilter,
        @WebParam(name = "session", targetNamespace = "")
        Session session)
        throws EntityNotFoundException, InvalidSessionException
    ;

}
